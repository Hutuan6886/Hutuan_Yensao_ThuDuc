
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Carousel {
    id String @id @unique @default(uuid()) 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    url String

    imageId String @unique
    image Image @relation("CarouselImage",fields: [imageId], references: [id])
}

model Category {
    id String @id @unique @default(uuid()) 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String
    normalizedName String

    parentId String?    // nếu null => là category cha
    parent Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
    children Category[] @relation("CategoryHierarchy")

    product Product[]
}

model Mass{
    id String @id @unique @default(uuid()) 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    value Int @unique

    productMass ProductMass[]
}

model ProductMass {
    id String @id @unique @default(uuid()) 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    price Int
    discount Float

    productId String
    product Product @relation(fields: [productId], references: [id],onDelete: Cascade)
    massId String
    mass Mass @relation(fields: [massId], references: [id],onDelete: Cascade)

    orderItems OrderItem[]
}

model Product {
    id String @id @unique @default(uuid()) 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    label String
    categoryId String
    category Category @relation(fields: [categoryId], references: [id],onDelete: Cascade)

    images Image[] @relation("ProductImages")

    productMass ProductMass[]
    notion Notion[]
    description Description[]
}

model Notion {
    id String @id @unique @default(uuid()) 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title String
    content String

    productId String
    product Product @relation(fields:[productId],references: [id],onDelete: Cascade)
}

model Description {
    id String @id @unique @default(uuid()) 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title String

    imageId String? @unique
    image Image? @relation("ProductDescriptionImage", fields:[imageId],references: [id])
    
    content String

    productId String
    product Product @relation(fields:[productId],references: [id],onDelete: Cascade)
}
model Image {
    id String @id @unique @default(uuid()) 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    href String
    alt String

    carousel Carousel? @relation("CarouselImage")

    productId String?
    product Product? @relation("ProductImages",fields: [productId], references: [id], onDelete: Cascade)

    description Description? @relation("ProductDescriptionImage")
}

model Order {
    id String @id @unique @default(uuid()) 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String
    phone String
    address String
    email String?

    orderItems OrderItem[]
}

model OrderItem {
    id String @id @unique @default(uuid()) 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    quantity Int
    status OrderStatus @default(PENDING)

    orderId String
    order Order @relation(fields: [orderId], references: [id],onDelete: Cascade)

    productMassId String
    productMass ProductMass @relation(fields: [productMassId], references: [id],onDelete: Cascade)
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELED
}
